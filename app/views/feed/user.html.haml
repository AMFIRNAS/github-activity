- provide(:feed_type, 'Public Activity')

-# Local variables
- one_line_events = ['CreateEvent', 'WatchEvent', 'FollowEvent', 'DeleteEvent', 'ForkEvent', 'GistEvent', 'MemberEvent']

- if !@user
  .info
    The username #{@username} doesn't exist.

- else
  
  = render partial: 'header'

  - if @events.size == 0
    .info
      #{@username} doesnâ€™t have any public activity yet.
      
  - else 
    - @events.each_with_index do |event, i|
      
      - type = event.type
      - repo = event.repo
      - p = event.payload
      - timestamp = DateTime.parse(event.created_at)

      .activity
        .activity-icon
          %i{ class: "#{icon_for(type)} icon-large"}

        .information{ class: (one_line_events.include?(type) ? 'single-line' : '') }
          - unless one_line_events.include?(type)
            %span{class: "time"}
              #{time_ago_in_words(timestamp)} ago<br />

          = link_to @user.login, github_link(@user.login)
            
          -# Push events are the most complicated events, and require the most complex template
          - if type == 'PushEvent'
            - branch = p.ref[11..-1]
            - commits = p.commits || p.shas
            pushed to #{link_to branch, convert(repo.url) + '/tree/' + branch} at #{link_to repo.name, convert(repo.url)}
            
            -# Show the three latest commits
            %ul
            - commits.each_with_index do |c, i|
              - begin
                %li
                  %small
                    = image_tag gravatar_for(c.author.email) || gravatar_for(c[1]), class: 'gravatar-small'
                    = link_to c.sha[0..5], convert(c.url) || c[0], class: 'sha'
                    = truncate(c.message, length: 100)
              - rescue
              - break if i == 2

            -# Display compare messages for multiple commits
            - begin
              %small
                -# Yes, this is hideous.
                - if commits.size > 3
                  = link_to "#{commits.size - 3} more commits " + HTMLEntities.new.decode('&raquo;'), "#{convert(repo.url)}/compare/#{p.before[0..9]}...#{p.head[0..9]}", class: 'more-commits'
                - elsif commits.size > 1
                  = link_to "View comparison for these #{commits.size} commits " + HTMLEntities.new.decode('&raquo;'), "#{convert(repo.url)}/compare/#{p.before[0..9]}...#{p.head[0..9]}", class: 'more-commits'
            - rescue

          - elsif type == 'CreateEvent'
            - if p.ref_type == 'tag'
              created tag #{link_to p.ref, github_link(repo.name + '/tree/' + p.ref)} at #{link_to repo.name, github_link(repo.name)}
            - elsif p.ref_type == 'repository'
              created repository #{link_to repo.name, github_link(repo.name)}
            - elsif p.ref_type == 'branch'
              created branch #{link_to p.ref, github_link(repo.name + '/tree/' + p.ref)} at #{link_to repo.name, github_link(repo.name)}

          - elsif type == 'WatchEvent' 
            starred #{link_to repo.name, github_link(repo.name)}

          - elsif type == 'ForkEvent' 
            forked #{link_to repo.name, github_link(repo.name)}

          - elsif type == 'DeleteEvent'
            deleted #{p.ref} at #{link_to repo.name, github_link(repo.name)}

          - elsif type == 'FollowEvent'
            - user = p.target
            started following #{link_to user.login, user.html_url}

          - elsif type == 'PublicEvent' 
            open sourced #{link_to repo.name, github_link(repo.name)}

          - elsif type == 'GistEvent' 
            - if p.gist
              #{p.action == 'fork' ? 'forked' : p.action + 'd'} #{link_to "gist: #{p.gist.id}", p.gist.html_url}
            - elsif p['url']
              #{p.action}d #{link_to p.name, p.url}

          - elsif type == 'MemberEvent' 
            #{p.action} #{link_to p.member.login, github_link(p.member.login)} to #{link_to repo.name, github_link(repo.name)}

          - elsif type == 'GollumEvent'
            - pg = p.pages[0]
            #{pg.action} the #{link_to repo.name, github_link(repo.name)} wiki<br />
            %small
              #{pg.action.capitalize} #{link_to pg.page_name, pg.html_url}.

          - elsif type == 'PullRequestEvent'
            - pr = p.pull_request
            #{p.action} pull request #{link_to "#{repo.name}##{pr.number.to_s}", pr.html_url}<br />
            %small
              #{pr.title}<br />
            %small{class: "branch-link"}
              #{pluralize(pr.commits, 'commit')} with #{pluralize(pr.additions, 'addition')} and #{pluralize(pr.deletions, 'deletion')}

          -elsif type == 'PullRequestReviewCommentEvent'
            - pr = p['pull_request']
            commented on pull request #{link_to repo.name + p.comment._links.html.href.split('/')[-1], p.comment.html_url}<br />
            %small= truncate(p.comment.body, length: 159)

          - elsif type == 'IssuesEvent'
            #{p.action} issue #{link_to "#{repo.name}##{p.issue.number}", p.issue.html_url}<br />
            %small= p.issue.title

          - elsif type == 'IssueCommentEvent'
            commented on issue #{link_to "#{repo.name}##{p.issue.number}", p.issue.html_url}<br />
            %small= truncate(p.comment.body, length: 159)

          - elsif type == 'CommitCommentEvent'
            commented on commit #{link_to "#{repo.name}@#{p['comment']['commit_id'][0..9]}", p['comment']['html_url']}<br />
            %small= truncate(p.comment.body, length: 159)

          - elsif type == 'ReleaseEvent'
            released #{link_to p.release.name, p.release.html_url} at #{link_to repo.name, github_link(repo.name)}<br />
            %small
              #{link_to "Download Source Code (zip)", "#{github_link(repo.name)}/archive/#{p.release.tag_name}.zip" }

          - else 
            interacted with #{link_to repo.name, github_link(repo.name)}

          - if one_line_events.include?(type)
            %span{class: "time"}
              #{time_ago_in_words(timestamp)} ago

        .clear

      - break if i + 1 == @limit.to_i